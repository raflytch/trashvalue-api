// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(cuid())
  name            String
  phone           String      @unique
  email           String?     @unique
  password        String
  address         String
  points          Int         @default(0)
  balance         Float       @default(0)
  role            Role        @default(USER)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  transactions    Transaction[]
  dropoffs        Dropoff[]
  profileImage    String?
  backgroundPhoto String?
}

model WasteType {
  id          String      @id @default(cuid())
  name        String      @unique
  pricePerKg  Float
  description String?
  image       String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  wasteItems  WasteItem[]
}

model Dropoff {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  status      Status      @default(PENDING)
  totalWeight Float
  totalAmount Float
  pickupAddress String?
  pickupDate   DateTime?
  pickupMethod PickupMethod @default(DROPOFF)
  notes        String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  wasteItems  WasteItem[]
}

model WasteItem {
  id          String    @id @default(cuid())
  dropoff     Dropoff   @relation(fields: [dropoffId], references: [id])
  dropoffId   String
  wasteType   WasteType @relation(fields: [wasteTypeId], references: [id])
  wasteTypeId String
  weight      Float
  amount      Float
  image       String?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Transaction {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  amount        Float
  type          TxType
  status        Status    @default(PENDING)
  paymentMethod PaymentMethod?
  paymentId     String?
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  PROCESSING
  COMPLETED
  REJECTED
  CANCELLED
}

enum TxType {
  DEPOSIT
  WITHDRAWAL
  REFUND
}

enum PaymentMethod {
  BANK_TRANSFER
  E_WALLET
  CASH
}

enum PickupMethod {
  PICKUP
  DROPOFF
}